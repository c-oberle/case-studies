package orm.persistor;

import concretesyntax.Java;
import concretesyntax.Stratego;

import orm.persistor.Syntax;
import orm.persistor.ApplyMapping;

public extension DesugarMapping {

desugarings
	desugar-mapping

rules
	desugar-mapping :
		MappingDec(mods, name, body) -> [mapping-class, mapping-trans-config]
	where
		mapping-class := <make-mapping-class> (mods, name, body);
		mapping-trans-config := <make-mapping-trans-config> (mods, name, body)
	
// mapping class
rules
	make-mapping-class :
		(mods, name, MappingBody(_,_,fields,_)) ->
		ClassDec(
			ClassDecHead(mods, name, None, None, None),
			ClassBody(static-fields))
	where
		static-fields := <map(FieldDec(make-public-static, id, id))> fields

	make-public-static = ![Public(),Static()|<filter(not(Private());not(Protected()))>]

// mapping trans config
rules
	make-mapping-trans-config :
		(mods, name, MappingBody(TableDec(table),ActionDec(action),fields,rulez)) -> 
		TransDec(
			TransDecHead(mods, name),
			TransBody(TransformationDef([],
				[main-rules, table-rules, action-rules, field-rules, rulez-rules])))
	where
		mname := <prim("SUGARJ_current_model_name")>;
		field-vars := <map(?FieldDec(_,_,<id>)); concat> fields;
		field-names := <map(?VarDec(Id(<id>)) + ?VarDec(Id(<id>), _))> field-vars;
		
		main-rules := |[rules main = apply-mapping(|string~mname)]|;

		table-name := <from-java-string> table;
		table-rules := |[rules mapping-table : string~mname -> string~table-name]|;
		action-rules := |[rules mapping-action : string~mname -> term~(<trm-explode> action)]|;
		field-rules := |[rules mapping-field-names : string~mname -> term~(<trm-explode> field-names)]|;
		rulez-rules := |[rules mapping-rulez : string~mname -> term~(<trm-explode> rulez)]|
}