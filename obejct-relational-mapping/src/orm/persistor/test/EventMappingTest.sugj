// copied from the hibernate tutorial: org.hibernate.tutorial.em.EntityManagerIllustrationTest
package orm.persistor.test;

import orm.hibernate.test.Event;

import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.hibernate.ejb.Ejb3Configuration;

import junit.framework.TestCase;

import EventMapped = orm.persistor.test.EventMapping(orm.persistor.test.Event);


/**
 * Illustrates basic use of Hibernate as a JPA provider.
 *
 * @author Steve Ebersole
 */
public class EventMappingTest extends TestCase {
	private EntityManagerFactory entityManagerFactory;

	/**
	 * @return an in-memory HSQL entityManager
	 * @author Timoteo Ponce
	 */
	public static Properties createBaseProperties() {
		Properties properties = new Properties();
		properties.put("javax.persistence.provider", "org.hibernate.ejb.HibernatePersistence");
		// properties.put("javax.persistence.transactionType", "RESOURCE_LOCAL");
		// properties.put("hibernate.connection.username", "sa");
		// properties.put("hibernate.connection.password" ,"");
		properties.put("hibernate.connection.driver_class","com.mysql.jdbc.Driver");	
		properties.put("hibernate.connection.url", "jdbc:mysql://localhost:3306/entitiesh" );
		properties.put("hibernate.dialect" ,"org.hibernate.dialect.MySQLDialect");
		properties.put("hibernate.hbm2ddl.auto","create");
		// properties.put("hibernate.show_sql","true");
		// properties.put("hibernate.format_sql" ,"true");
		return properties;	
		
	}

	@Override
	protected void setUp() throws Exception {
	    Ejb3Configuration cfg = new Ejb3Configuration();
	    cfg.addProperties(createBaseProperties());
		
		cfg.addAnnotatedClass(EventMapped.class);
		
		entityManagerFactory = cfg.buildEntityManagerFactory();
	}

	@Override
	protected void tearDown() throws Exception {
		entityManagerFactory.close();
	}

	public void testBasicUsage() {
		EventMapped e1 = new EventMapped("Our very first automatically mapped event!", new Date());
		EventMapped e2 = new EventMapped("A follow up automatically mapped event", new Date());
		System.out.println(e1 + ": " + e1.getID());
		System.out.println(e2 + ": " + e2.getID());
		
		// create a couple of events...
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		entityManager.getTransaction().begin();
		entityManager.persist(e1);
		entityManager.persist(e2);
		entityManager.getTransaction().commit();
		entityManager.close();

		// now lets pull events from the database and list them
		entityManager = entityManagerFactory.createEntityManager();
		entityManager.getTransaction().begin();
        List<EventMapped> result = entityManager.createQuery( "from " + EventMapped.class.getSimpleName(), EventMapped.class ).getResultList();
        assertEquals(result.size(), 2);
        assertEquals(result.get(0).getTitle(), "Our very first automatically mapped event!");
        assertEquals(result.get(1).getTitle(), "A follow up automatically mapped event");
        
        // let's update the second event
        result.get(1).setTitle("A changed follow up automatically mapped event");
        entityManager.getTransaction().commit();
        entityManager.close();
        
        // now lets see if our change was effective
        entityManager = entityManagerFactory.createEntityManager();
		entityManager.getTransaction().begin();
        List<EventMapped> result2 = entityManager.createQuery( "from " + EventMapped.class.getSimpleName(), EventMapped.class ).getResultList();
        assertEquals(result2.size(), 2);
        assertEquals(result2.get(0).getTitle(), "Our very first automatically mapped event!");
        assertEquals(result2.get(1).getTitle(), "A changed follow up automatically mapped event");
        entityManager.getTransaction().commit();
        entityManager.close();
	}
}
