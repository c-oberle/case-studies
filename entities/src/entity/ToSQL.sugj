package entity;

import sql.Commands;
import entity.Metamodel;

public transformation ToSQL {
  main : 
  	   CompilationUnit(decls)
  	-> CompilationUnit(all-decls)
  where java-decls := <map(?ModelDec(_,_) < entity-to-sql
                         + ?TypeImportDec(_) < trans-entity-import 
                         + id)> decls
      ; new-imports := [TypeImportDec(Id("java.sql.*")), TypeImportDec(Id("sql.Commands"))]
      ; all-decls := <insert-java-imports> (new-imports, java-decls)
  
  trans-entity-import :
  	   imp@TypeImportDec(type)
    -> transimp
  where imodel := <resolve-model-import <+ ![]> imp
      ; transimp := 
          <if oncetd(?ModelDec(ModelDecHead(_,_,Id("entity.Metamodel")),_))
           then !TransImportDec(None, TransApp(Id(<current-transformation-name>), type))
           else !imp
           end> imodel

  
  insert-java-imports :
       (imports, [p@PackageDec(_,_)|decls]) -> <concat> [[p], imports, decls]
  inser-java-imports :
       (imports, decls) -> <concat> [imports, decls]
  
  entity-to-sql :
       ModelDec(ModelDecHead(mods, Id(name), Id("entity.Metamodel")), ModelBody((_,body)))
    -> ClassDec(ClassDecHead(mods, Id(name), None, None, None), ClassBody(decls))
  where init := <debug;make-sql-init(|name);debug> body
      ; constr := <debug;make-java-constr(|name);debug> body
      ; key-constr := <make-java-key-constr(|name)> body
      ; accessors := <mapconcat(\t -> [<make-java-getter(|name)> t, <make-java-setter(|name, body)> t]\)> body
      ; decls := <concat> [init, [constr, key-constr], accessors]

  make-sql-init(|table-name) :
       fields
    -> [FieldDec([Private(), Static()],
                 ClassOrInterfaceType(TypeName(Id("Connection")), None()),
                 [ VarDec(Id("connection"),
                     Invoke(Method(MethodName(AmbName(Id("Commands")), Id("connect"))),
                            [Lit(String([Chars("jdbc:mysql://localhost:3306/entities")]))]))])
       ,FieldDec([Private(), Static()],
                 ClassOrInterfaceType(TypeName(Id("Statement")), None()),
                 [VarDec(Id("stmt"),
                    Invoke(Method(MethodName(AmbName(Id("Commands")), Id("createStatement"))),
                           [ExprName(Id("connection"))]))])
       ,StaticInit(Block([ExprStm(
          Invoke(Method(MethodName(AmbName(Id("Commands")), Id("createTable"))),
                 [ExprName(Id("stmt"))
                 , Lit(String([Chars(table-name)]))
                 | sql-cols]))]))
       ,FieldDec([Public()], Long(), [VarDec(Id("key"))])
       ]
  where sql-cols := <map(\Property(Id(name), type) -> <conc-strings>(name, " ", <to-sql-type> (name,type))\; !Lit(String([Chars(<id>)])))> fields


  make-java-getter(|table-name) :
       Property(Id(name), type)
    -> MethodDec(MethodDecHead([Public], None, java-type, Id(get-name),[],None), Block([Return(Some(select-exp))]))
  where java-type := <to-java-type> type
      ; <sql-selector-for-type> type => selector
      ; get-name := <concat-strings> ["get", <first-upper> name]
      ; select-exp :=
          Invoke(Method(MethodName(AmbName(Id("Commands")), Id(selector))),
                 [ ExprName(Id("stmt"))
                 , Lit(String([Chars(table-name)]))
                 , ExprName(Id("key"))
                 , Lit(String([Chars(name)]))
                 ])

  make-java-getter(|table-name) :
       Property(Id(name), type)
    -> MethodDec(MethodDecHead([Public], None, java-type, Id(get-name),[],None), Block([Return(Some(select-exp))]))
  where java-type := <to-java-type> type
      ; <not(sql-selector-for-type)> type
      ; get-name := <concat-strings> ["get", <first-upper> name]
      ; class-arg := Lit(Class(java-type))
      ; select-exp :=
          Invoke(Method(MethodName(AmbName(Id("Commands")), Id("selectForeignCol"))),
                 [ ExprName(Id("stmt"))
                 , Lit(String([Chars(table-name)]))
                 , ExprName(Id("key"))
                 , Lit(String([Chars(name)]))
                 , class-arg
                 ])

  make-java-setter(|class-name, fields) :
       Property(Id(name), type)
    -> MethodDec(MethodDecHead([Public], None, this-class-type, Id(set-name),[java-param],None),Block([ExprStm(update-exp), Return(Some(This))]))
  where this-class-type := <to-java-type> SimpleSort(Id(class-name))
      ; java-type := <to-java-type> type
      ; set-name := <concat-strings> ["set", <first-upper> name]
      ; java-param := <make-java-param> Property(Id(name), type)
      ; update-exp := 
          Invoke(Method(MethodName(AmbName(Id("Commands")), Id("update"))),
                [ ExprName(Id("stmt"))
                , Lit(String([Chars(class-name)]))
                , ExprName(Id("key"))
                , Lit(String([Chars(name)]))
                , ExprName(Id(name))
                ])
  
  make-java-new-expr(|class-name) :
       fields
    -> NewInstance(None,ClassOrInterfaceType(TypeName(Id(class-name)),None), args, None)
  where args := <map(?Property(Id(<id>),_); make-java-var-ref)> fields 

  
  make-java-var-ref :
       name
    -> ExprName(Id(name))

  make-java-constr(|table-name) :
       fields
    -> ConstrDec(
         ConstrDecHead([Public], None, Id(table-name), java-params, None),
         ConstrBody(None, [
         	ExprStm(Assign(ExprName(Id("key")),
         	  Invoke(Method(MethodName(AmbName(Id("Commands")), Id("insertInto"))),
         	          [ ExprName(Id("stmt"))
                      , Lit(String([Chars(table-name)]))
                      , Lit(String([Chars(cols-concated)]))
                      | cols-refs
                      ]
                    )
                  )
                )]))
  where java-params := <map(make-java-param)> fields
      ; cols := <map(?Property(Id(<id>), _))> fields
      ; cols-refs := <map(make-java-col-val)> fields
      ; cols-concated := <intersperse(|", "); concat-strings> cols

  make-java-key-constr(|table-name) :
       fields
    -> ConstrDec(
         ConstrDecHead([Public], None, Id(table-name), [Param([], Long, Id("key"))], None),
         ConstrBody(None, [
         	ExprStm(Assign(Field(This(), Id("key")), ExprName(Id("key"))))
         	]))
  
  make-java-col-val :
       Property(Id(name), type)
    -> ExprName(Id(name))
  where <sql-selector-for-type> type
  
  make-java-col-val :
       Property(Id(name), type)
    -> Cond(Eq(ExprName(Id(name)), Lit(Null()))
           , Minus(Lit(Deci("1")))
           , ExprName(AmbName(Id(name)), Id("key"))
           )
  where <not(sql-selector-for-type)> type
  
  make-java-param :
       Property(Id(name1), type1)
    -> Param([], <to-java-type> type1, Id(name1))
 
 
  make-java-init-stmt :
       Property(Id(name), type)
    -> ExprStm(Assign(Field(This, Id(name)), ExprName(Id(name))))
  
  to-java-type : SimpleSort(Id("int")) -> Int()
  to-java-type : SimpleSort(Id("Integer")) -> Int()
  to-java-type : SimpleSort(type) -> ClassOrInterfaceType(TypeName(type),None)
  to-java-type : GenericSort(tyop, tyargs) ->
                   ClassOrInterfaceType(TypeName(tyop),
                                        Some(TypeArgs(<map(to-java-type)> tyargs)))

  to-sql-type : (_,SimpleSort(Id("int"))) -> "int"
  to-sql-type : (_,SimpleSort(Id("String"))) -> "varchar(64)"
  to-sql-type : (name,type) -> "int" //<concat-strings> ["int, FOREIGN KEY (", name, ") REFERENCES ", type, "(primkey)"]

  sql-selector-for-type : SimpleSort(Id("int")) -> "selectIntCol"
  sql-selector-for-type : SimpleSort(Id("Integer")) -> "selectIntCol"
  sql-selector-for-type : SimpleSort(Id("String")) -> "selectStringCol"
  
  first-upper = string-as-chars([to-upper|id])

  intersperse(|s) : [] -> []
  intersperse(|s) : [x] -> [x]
  intersperse(|s) : [x|y] -> [x,s| <intersperse(|s)> y]

}