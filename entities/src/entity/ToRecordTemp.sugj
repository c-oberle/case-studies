package entity;

import template.Language;

import entity.Metamodel;
import org.sugarj.languages.Java;

public template ToRecordTemp {
  $$first-upper = string-as-chars([to-upper|id])
  $$sort-to-type : SimpleSort(name) -> ClassOrInterfaceType(TypeName(name), None)
  $$sort-to-type : GenericSort(tyop, tyargs) ->
                   ClassOrInterfaceType(TypeName(tyop),
                                        Some(TypeArgs(<map(sort-to-type)> tyargs)))
  
  $$try-transform-model-import(|metamodel) = try-transform-model-import(|metamodel, <current-transformation-name>)
  $$try-transform-model-import(|metamodel, trans) : imp@TypeImportDec(type) -> transimp
    where transimp := <try( resolve-model-import
                          ; oncetd(?ModelDec(ModelDecHead(_,_,Id(metamodel)),_))
                          ; !TransImportDec(None, TransApp(Id(trans), type)))> imp

  $pkg = collect-one(?PackageDec(_,<id>))
  $classname = collect-one(?ModelDecHead(_,<id>,_))

  package $pkg;

  $*{collect-all(try-transform-model-import(|"entity.Metamodel"))}

  public class $classname {
    $for(Property(name, sort) in collect-all(?Property(_,_))) {
      $type = <sort-to-type> sort
      $uppername = <Id(first-upper)> name
      
      private $type $name;
      public $type get#$uppername() { return $name; }
      public void set#$uppername($type $name) { this.$name = $name; }
    }

    public $classname($for(Property(name, sort) in collect-all(?Property(_,_))) {
                        ${<sort-to-type> sort} $name
                      }) {
      $for(Property(name, _) in collect-all(?Property(_,_))) {
        this.$name = $name;
      }
    }
  }
}