package entity;

import entity.Metamodel;

public transformation ToRecord {
  main = CompilationUnit(map(?ModelDec(_,_) < entity-to-record 
                           + ?TypeImportDec(_) < trans-entity-import
                           + id))
  trans-entity-import :
  	   imp@TypeImportDec(type)
    -> transimp
  where imodel := <resolve-model-import <+ ![]> imp
      ; transimp := 
          <if oncetd(?ModelDec(ModelDecHead(_,_,Id("entity.Metamodel")),_))
           then !TransImportDec(None, TransApp(Id(<current-transformation-name>), type))
           else !imp
           end> imodel
  
  entity-to-record :
       ModelDec(ModelDecHead(mods, Id(name), Id("entity.Metamodel")), ModelBody((_,body)))
    -> ClassDec(ClassDecHead(mods, Id(name), None, None, None), ClassBody(decls))
  where constr := <make-java-constr(|name)> body
      ; fields := <map(make-java-fields)> body
      ; accessors := <mapconcat(\t -> [<make-java-getter> t, <make-java-setter(|name, body)> t]\)> body
      ; decls := <concat> [[constr], fields, accessors]
  

  make-java-fields :
       Property(Id(name), type)
    -> FieldDec([Private], <to-java-type> type, [VarDec(Id(name))])
  

  make-java-getter :
       Property(Id(name), type)
    -> MethodDec(MethodDecHead([Public], None, java-type, Id(get-name),[],None), Block([Return(Some(Field(This,Id(name))))]))
  where java-type := <to-java-type> type
      ; get-name := <concat-strings> ["get", <first-upper> name]

  make-java-setter(|class-name, fields) :
       Property(Id(name), type)
    -> MethodDec(MethodDecHead([Public], None, this-class-type, Id(set-name),[java-param],None),Block([java-init-stmt, Return(Some(This))]))
  where this-class-type := <to-java-type> SimpleSort(Id(class-name))
      ; java-type := <to-java-type> type
      ; set-name := <concat-strings> ["set", <first-upper> name]
      ; java-param := <make-java-param> Property(Id(name), type)
      ; java-init-stmt := <make-java-init-stmt> Property(Id(name), type)
  
  make-java-var-ref :
       name
    -> ExprName(Id(name))

  make-java-constr(|class-name) :
       fields
    -> ConstrDec(
         ConstrDecHead([Public], None, Id(class-name), java-params, None),
         ConstrBody(None, java-init-stmts))
  where java-params := <map(make-java-param)> fields
      ; java-init-stmts := <map(make-java-init-stmt)> fields
  
  
  make-java-param :
       Property(Id(name1), type1)
    -> Param([], <to-java-type> type1, Id(name1))
 
 
  make-java-init-stmt :
       Property(Id(name), type)
    -> ExprStm(Assign(Field(This, Id(name)), ExprName(Id(name))))
  
  to-java-type : SimpleSort(Id("int")) -> Int()
  to-java-type : SimpleSort(type) -> ClassOrInterfaceType(TypeName(type),None)
  to-java-type : GenericSort(tyop, tyargs) ->
                   ClassOrInterfaceType(TypeName(tyop),
                                        Some(TypeArgs(<map(to-java-type)> tyargs)))
  
  first-upper = string-as-chars([to-upper|id])
}

