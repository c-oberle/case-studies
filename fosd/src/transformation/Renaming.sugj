package transformation;

public transformation Renaming {
rules
  import-model-path : TypeName(Id(name)) -> ([], name)
  import-model-path : TypeName(pkg, Id(name)) -> (<import-model-pkg> pkg, name)

  import-model-pkg : PackageOrTypeName(Id(name)) -> [name]
  import-model-pkg : PackageOrTypeName(pkg, Id(name)) -> <conc> (<import-model-pkg> pkg, [name])

  build-path : ([], name) -> name
  build-path : ([pkg|pkgs], name) -> <conc-strings> (pkg, "/", <build-path> (pkgs, name))

  name-suffix = !("$", <id>); conc-strings; string-replace(|"/","_")

  apply-renamings(|renamings) =
    where(<?[(pkgs, from, to)|rest]> renamings)
      < apply-renaming(|pkgs, <as-java-path> from, <as-java-path> to); apply-renamings(|rest)
      + id

  apply-renaming(|pkgs, from, to) =
    topdown(try(rename-java(|pkgs, from, to)))

  as-java-path = string-as-chars(map(try(?'-';!'$')))

  split-packages-decname =
    where(!(<id>, "/"); not(split-before));
    !([], <id>)

  split-packages-decname =
    !(<id>, "/"); split-before => (pkg, rest);
    <string-as-chars(Tl); split-packages-decname> rest => (pkgs, name);
    !([pkg|pkgs], name)

  compose-path : ([], name) -> <as-java-path> name
  compose-path : ([pkg|pkgs], name) -> <conc-strings> (pkg, "/", <compose-path> (pkgs, name))

  rename-main-rules(|model-path, transformation-path) =
    where(!(model-path, transformation-path);
          prim("SUGARJ_rename_main_args") => (_, new-name));
    rename-rules(|"main", new-name)
}