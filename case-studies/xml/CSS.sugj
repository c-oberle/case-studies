package xml;

import org.sugarj.languages.EditorServices;
import concretesyntax.EditorServices;

public sugar CSS {
  context-free syntax
    AnnoOrSugarMod* "css" JavaId CSSBody -> ToplevelDeclaration{cons("CSSDec")}
    "{" CSSStm* "}" -> CSSBody {cons("CSSBody")}
    
  context-free syntax
    Selector "{" {CSSRule ";"}* Semicolon? "}" -> CSSStm {cons("CSSStm")}
    EditorServiceNode -> Selector {cons("Selector")}
  
    "color" ":" CSSColor -> CSSRule {cons("ColorRule")}
    "background-color" ":" CSSColor -> CSSRule {cons("BackgroundColorRule")}
    "environment-color" ":" CSSColor -> CSSRule {cons("ColorAllRule")}
    "environment-background-color" ":" CSSColor -> CSSRule {cons("BackgroundColorAllRule")}
    "outlining" -> CSSRule {cons("OutliningRule")}
    "folding" -> CSSRule {cons("FoldingRule")}
    
    EditorServiceColor -> CSSColor
    EditorServiceAttributeId -> CSSColor {cons("AttributeRef")}


  lexical syntax
    ";" -> Semicolon
  
  desugarings
    css-to-editor-services
  
  rules
    css-to-editor-services :
      CSSDec(mods, n, CSSBody(stms))
      ->
      EditorServicesDec(EditorServicesDecHead(mods, n), EditorServicesBody(<mapconcat(compile-css)> stms))
    
    compile-css :
      CSSStm(Selector(node), rs, _) -> <map(compile-css-rule(|node))> rs

    
    compile-css-rule(|node) :
      ColorRule(color)
      ->
      |[ colorer
           ~node : ~attr
       ]|
      where <?AttributeRef(_) < id + !Attribute(color, NoColor, NORMAL)> color => attr
    
    compile-css-rule(|node) :
      BackgroundColorRule(color)
      ->
      |[ colorer
           ~node : ~attr
       ]|
      where <?AttributeRef(_) < id + !Attribute(ColorDefault, color, NORMAL)> color => attr
    
    compile-css-rule(|node) :
      ColorAllRule(color)
      ->
      |[ colorer
           environment ~node : ~attr
       ]|
      where <?AttributeRef(_) < id + !Attribute(color, NoColor, NORMAL)> color => attr
    
    compile-css-rule(|node) :
      BackgroundColorAllRule(color)
      ->
      |[ colorer
           environment ~node : ~attr
       ]|
      where <?AttributeRef(_) < id + !Attribute(ColorDefault, color, NORMAL)> color => attr
     
    compile-css-rule(|node) :
      FoldingRule
      ->
      |[ folding
           ~node
       ]|
    
    compile-css-rule(|node) :
      OutliningRule
      ->
      |[ outliner
           ~node
       ]|

}