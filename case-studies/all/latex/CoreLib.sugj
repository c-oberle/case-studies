package latex;

import concretesyntax.Stratego;
import concretesyntax.EditorServices;

import latex.Core;

import util.Strategies;

public sugar CoreLib {
  lexical syntax
    "\\maketitle" -> NullaryTextCommand
    "\\LaTeX" -> NullaryTextCommand
    "\\TeX" -> NullaryTextCommand
    "\\ " -> NullaryTextCommand
    "\\\\" -> NullaryTextCommand
    "\\and" -> NullaryTextCommand
    "\\url" -> UnaryTextCommand
    "\\small" -> NullaryTextCommand
    "\\sf" -> NullaryTextCommand
    "\\noindent" -> NullaryTextCommand
    "\\footnote" -> UnaryTextCommand
    "\\\"" -> UnaryTextCommand
    "\\`" -> UnaryTextCommand
    "\\«" -> UnaryTextCommand
    "\\'" -> UnaryTextCommand
    "\\#" -> NullaryTextCommand
    "\\input" -> UnaryTextCommand
    "\\documentclass" -> UnaryTextCommand
    "\\usepackage" -> UnaryTextCommand
    "\\hyphenation" -> UnaryTextCommand
    
    "\\bibliographystyle" -> UnaryTextCommand
    "\\bibliography" -> UnaryTextCommand
  
  rules
    latex-text-environment = ?"abstract"
    latex-text-environment = ?"center"
    
  syntax
    "\\emph" "{" LatexTextContent "}" -> InTextCommand {cons("EmphCommand")}
    "\\title" "{" LatexTextContent "}" -> InTextCommand {cons("TitleCommand")}

  rules
    pp-latex-command :
      EmphCommand(content)
      ->
      <conc-strings> ("\\emph{", <pp-latex> content, "}")

    pp-latex-command :
      TitleCommand(content)
      ->
      <conc-strings> ("\\title{", <pp-latex> content, "}") 
    
  

  // document environment
  lexical syntax
    "document" -> LatexDocumentEnvironmentName
    "document" -> LatexTextEnvironmentName {reject}

  syntax
    "\\begin" "{" <LatexDocumentEnvironmentName-LEX> "}"
    LatexDocument
    "\\end" "{" <LatexDocumentEnvironmentName-LEX> "}"
    -> DocumentEnvironment {cons("DocumentEnvironment")}
    
    LatexTextContent? DocumentEnvironment <LAYOUT?-CF> -> LatexDocument

  rules
    pp-latex :
    DocumentEnvironment(lname, doc, rname) ->
    <conc-strings> ("\\begin{", lname, "}", 
                        <pp-latex> doc,
                      "\\end{", rname, "}")
  
  // list environment
  lexical syntax
    "itemize" -> LatexItemizeEnvironmentName
    "itemize" -> LatexTextEnvironmentName {reject}
  
  syntax
    "\\begin" "{" <LatexItemizeEnvironmentName-LEX> "}"
    <LAYOUT?-CF>
    LatexItem*
    "\\end" "{" <LatexItemizeEnvironmentName-LEX> "}"
    -> InTextEnvironment {cons("ItemizeEnvironment")}

    "\\item" LatexTextContent? -> LatexItem {cons("Item")}

  rules
    pp-latex-environment :
    ItemizeEnvironment(lname, items, rname) ->
    <conc-strings> ("\\begin{", lname, "}\n", 
                        <mapconcat-strings(pp-item)> items,
                      "\\end{", rname, "}")
    
    pp-item :
    Item(c) -> <conc-strings> ("\\item", <pp-latex> c)
  
  
  // figure environment
  lexical syntax
    "figure" -> LatexFigureEnvironmentName
    "figure*" -> LatexFigureEnvironmentName
    "figure" -> LatexTextEnvironmentName {reject}
    "figure*" -> LatexTextEnvironmentName {reject}
  
  syntax
    "\\begin" "{" <LatexFigureEnvironmentName-LEX> "}" OptionalArg?
    LatexTextContent?
    "\\caption" "{" LatexTextContent? "}"
      <LAYOUT?-CF>
    "\\label" "{" <LabelID-LEX> "}"
      <LAYOUT?-CF>
    "\\end" "{" <LatexFigureEnvironmentName-LEX> "}"
    -> InTextEnvironment {cons("FigureEnvironment")}

  rules
    constraint-error :
      FigureEnvironment(lname, _, _, _, _, rname) ->
      [(lname, msg), (rname, msg)]
      where
        <not(equal)> (lname, rname); 
        !"begin and end name must coincide" => msg

  
    pp-latex-environment :
	    FigureEnvironment(lname, opt-arg, content, caption, label, rname) ->
	    <conc-strings> ("\\begin{", lname, "}", <pp-latex> opt-arg, "\n", 
	                        <pp-latex> content, "\n",
	                        "\\caption{", <pp-latex> caption, "}\n",
	                        "\\label{", <pp-latex> label, "}\n",
	                      "\\end{", rname, "}")

    latex-to-sugar :
      FigureEnvironment(_, _, _, _, label, _) ->
      transformation-elem(Rules([SDefNoArgs("latex-label", Match(NoAnnoList(Str(label))))]))
    
    latex-to-services :
      FigureEnvironment(_, _, _, _, label, _) ->
      |[
        completions
          completion template : RefID = string~label
      ]|


  //dimensions
  lexical syntax
    [0-9][0-9]* -> LatexNat
    LatexNat -> LatexFloat
    LatexNat "." LatexNat -> LatexFloat

  syntax
    LatexDimension -> <LatexDimension-CF>
    <LatexFloat-LEX> LatexUnit -> LatexDimension {cons("Dimension")}
    "em" -> LatexUnit {cons("Em")}
    "cm" -> LatexUnit {cons("Cm")}

  rules
    pp-latex-dimension :
      Dimension(f, unit) -> <conc-strings> (f, <pp-latex-unit> unit)
    
    pp-latex-unit : Em() -> "em"
    pp-latex-unit : Cm() -> "cm"

  
  // internal references
  lexical syntax
    [a-zA-Z\_\--\/0-9\:\.]+ -> LabelID
    [a-zA-Z\_\--\/0-9\:\.]+ -> RefID
  
  syntax
    "\\label" "{" <LabelID-LEX> "}" -> InTextCommand {cons("LabelCommand")}
    "\\ref" "{" <RefID-LEX> "}" -> InTextCommand {cons("RefCommand")}
  
  rules
    pp-latex-command :
    LabelCommand(ref) -> <conc-strings> ("\\label{", ref, "}")
    
    pp-latex-command :
    RefCommand(ref) -> <conc-strings> ("\\ref{", ref, "}")
  
  rules
    latex-to-services :
      LabelCommand(label)
      ->
      |[
        completions
          completion template : RefID = string~label
      ]|
  
  rules 
    latex-label = fail
    
    latex-to-sugar :
      LabelCommand(label)
      ->
      transformation-elem(Rules([SDefNoArgs("latex-label", Match(NoAnnoList(Str(label))))]))
    
    constraint-warning :
      RefCommand(ref) -> (ref, <conc-strings> ("undefined reference: ", ref))
      where
        <not(latex-label)> ref
}

public editor services CoreLib {
  colorer
    environment _.EmphCommand : 0 0 255 italic
    environment _.TitleCommand : 0 128 0 bold
    
    RefID : 24 150 150
    
    LatexDocumentEnvironmentName : black
    LatexItemizeEnvironmentName : black
  
  folding
    DocumentEnvironment
    ItemizeEnvironment
  
  completions
    completion template : LatexTextEnvironmentName = "abstract"
    completion template : LatexTextEnvironmentName = "document"
    completion template : LatexTextEnvironmentName = "itemize"
  
    completion template : LatexTextContentPart = "\emph{" <text> "}"
    completion template : LatexTextContentPart = "\label{" <ref> "}"
    completion template : LatexTextContentPart = "\ref{" <ref> "}"
    
    completion template : LatexItem = "\item " <text>
  
  language
    line comment : "%"
}