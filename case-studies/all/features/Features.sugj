package features;

import concretesyntax.Stratego;
import concretesyntax.EditorServices;

import org.sugarj.languages.Java;
import editor.Colors;

public sugar Features {
 context-free syntax
  JavaId -> FeatureName {cons("FeatureName")}

  //conditional elements
   "#" "feature" "(" FeatureExpr ")" JavaMethodDec -> JavaMethodDec {cons("ConditionalMethod")}
   "#" "feature" "(" FeatureExpr ")" JavaStm -> JavaStm {cons("ConditionalStatement")}
   "#" "feature" "(" FeatureExpr ")" JavaTypeDec -> JavaTypeDec{cons("ConditionalType")}
   FeatureName->FeatureExpr
   FeatureExpr "&&" FeatureExpr -> FeatureExpr {cons("FeatureExprAnd")}
   FeatureExpr "||" FeatureExpr -> FeatureExpr {cons("FeatureExprOr")}
   "(" FeatureExpr ")" -> FeatureExpr
   "!" FeatureExpr -> FeatureExpr {cons("FeatureExprNot")}
  
  //feature model
  AnnoOrSugarMod* "featuremodel" JavaId FeatureModelBody -> ToplevelDeclaration{cons("FMDecl")}
  "{" FeatureDeclaration* "}" -> FeatureModelBody {cons("FMBody")}
   "feature" FeatureName FeatureDependencies? ";" -> FeatureDeclaration {cons("FeatureDecl")}
   "implies" FeatureName -> FeatureDependencies

//config declaration
  AnnoOrSugarMod* "config" JavaId "for" JavaId "{" ConfigDeclaration*  "}" -> ToplevelDeclaration {cons("ConfigDecl")}
  "enable" {FeatureName ","}+ ";" -> ConfigDeclaration {cons("FeatureActivation")}
  "color" FeatureName EditorServiceInt EditorServiceInt EditorServiceInt ";" -> ConfigDeclaration {cons("FeatureColorDefinition")}
  
 context-free priorities
   {"(" FeatureExpr ")" -> FeatureExpr } >
   {FeatureExpr "&&" FeatureExpr -> FeatureExpr }>
   {FeatureExpr "||" FeatureExpr -> FeatureExpr }>
   {"!" FeatureExpr -> FeatureExpr }


 desugarings
   featuremodel
   featureconfig

 rules
   featuremodel : 
     FMDecl(mods, Id(n), FMBody(decls))
     -> 
     [SugarDec(SugarDecHead(mods, Id(n)), SugarBody([sugar])),
      EditorServicesDec(EditorServicesDecHead(mods, Id(n)), EditorServicesBody(services))]
     where 
       <featuredecl2sugar(|n)> decls => pre-sugar;
       !transformation-elem(pre-sugar) => sugar;

       <map(featuredecl2service)> decls => services

     featuredecl2sugar(|n) :
       decls
       ->
       |[ rules featuremodel : string~n -> term~names ]|
       where
         <get-decl-names; map(!NoAnnoList(Str(<id>))); !NoAnnoList(List(<id>))> decls => names
    
    featuredecl2service :
     FeatureDecl(FeatureName(Id(n)), _)
     ->
     |[  completions
           completion template : FeatureName = string~n
     ]|
    
    featuremodel = fail

    get-decl-names = map(?FeatureDecl(FeatureName(Id(<id>)), _))


      

 rules
   featureconfig : 
     ConfigDecl(mods, Id(n), Id(fm), configs)
     -> 
     SugarDec(SugarDecHead(mods, Id(n)), SugarBody([sugar]))
     where 
       <featureconfig2sugar> configs => pre-sugar;
       !transformation-elem(pre-sugar) => sugar

   featureconfig2sugar :
     decls
     ->
     |[ rules featureconfig : () -> term~names ]|
     where
       <get-enabled-names; map(!NoAnnoList(Str(<id>))); !NoAnnoList(List(<id>))> decls => names
    
    featureconfig = fail

    get-enabled-names = mapconcat(?FeatureActivation(<id>); map(?FeatureName(Id(<id>))))

 
 
  rules
    check-decls =
      ?decls;
      get-decl-names;
      ?names;
      !decls;
      mapconcat(check-name(|names);![<id>] <+ ![])

    check-name(|names) :
      FeatureDecl(FeatureName(Id(n)), t@Some(FeatureName(Id(dep))))
      ->
      (t, <concat-strings> ["undefined feature ", dep, " in feature decl ", n])
      where <not(elem)> (dep, names)

    constraint-error = check-decls


  desugarings
    cond-stm
    cond-methods
    cond-type

  rules
    cond-stm :
      ConditionalStatement(e, s) -> s
       where <eval-condition> e

    cond-stm :
      ConditionalStatement(e, s) -> Empty
       where <not(eval-condition)> e

    filter-method :
      ConditionalMethod(e, m) -> m
       where <eval-condition> e

    filter-method :
      m -> m
      where <not(?ConditionalMethod(_,_))> m

    cond-methods :
      list -> <filter(filter-method)> list

    cond-type :
      ConditionalType(e, t) -> t
       where <eval-condition> e

    cond-type :
      ConditionalType(e, t) -> [] 
       where <not(eval-condition)> e


    eval-condition :
      e@FeatureName(Id(n)) -> e 
      where <featureconfig> () => names;
            <elem> (n, names)

    eval-condition :
      n@FeatureExprNot(e) -> n 
      where <not(eval-condition)> e

    eval-condition :
      a@FeatureExprAnd(e1, e2) -> a 
      where <eval-condition> e1;
            <eval-condition> e2

    eval-condition :
      o@FeatureExprOr(e1, e2) -> o 
      where <eval-condition> e1

    eval-condition :
      o@FeatureExprOr(e1, e2) -> o 
      where <eval-condition> e2
}

public editor services Features {
  //TODO coloring
  //TODO configuration-aware folding
  //TODO configuration-specific preview builder or with input dialog
  //TODO outlining
  //TODO reference resolving
  //TODO code completion limited through candidate sorts

  completions
    completion trigger : "#"
    completion template : JavaTypeDec = "#feature(" <e> ")" 
    completion template : JavaMethodDec = "#feature(" <e> ")" 
    completion template : JavaStm = "#feature(" <e> ")" 
    completion template : JavaBlockStm = "#feature(" <e> ")" 

  folding
    _.ConditionalStatement
    _.ConditionalMethod
    _.ConditionalType

//   colorer ConditionalMethodColoring
//     environment _.ConditionalStatement : _ 192 255 255
//     _.ConditionalStatement : _ 192 255 255
//
//     _.ConditionalMethod : _ 192 192 192
}
