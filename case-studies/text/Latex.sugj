package text;

import org.sugarj.languages.Plain;

public sugar Latex {
  context-free syntax
    AnnoOrSugarMod* "latex" JavaId LatexBody -> ToplevelDeclaration{cons("LatexDec")}
  
  syntax
    "{" LatexDocument "}" -> <LatexBody-CF> {cons("LatexBody")}
    
    <TextContent-LEX> -> LatexTextContentPart {cons("Text")}
    "{" LatexTextContent "}" -> LatexTextContentPart {cons("TextBlock")}
    InTextCommand -> LatexTextContentPart {cons("TextCommand")}
    InTextEnvironment -> LatexTextContentPart {cons("TextEnvironment")}
    
    LatexTextContentPart+ -> LatexTextContent

    "\\part" "{" LatexHeader "}" LatexPartContent -> LatexPart {cons("Part")}
    "\\chapter" "{" LatexHeader "}" LatexChapterContent -> LatexChapter {cons("Chapter")}
    "\\section" "{" LatexHeader "}" LatexSectionContent -> LatexSection {cons("Section")}
    "\\subsection" "{" LatexHeader "}" LatexSubsectionContent -> LatexSubsection {cons("Subsection")}
    "\\subsubsection" "{" LatexHeader "}" LatexSubsubsectionContent -> LatexSubsubsection {cons("Subsubsection")}
    "\\paragraph" "{" LatexHeader "}" LatexParagraphContent -> LatexParagraph {cons("Paragraph")}
    
    LatexTextContent? LatexPart+ -> LatexDocument
    LatexPartContent -> LatexDocument
    
    LatexTextContent? LatexChapter+ -> LatexPartContent
    LatexChapterContent -> LatexPartContent
    
    LatexTextContent? LatexSection+ -> LatexChapterContent
    LatexSectionContent -> LatexChapterContent
    
    LatexTextContent? LatexSubsection+ -> LatexSectionContent
    LatexSubsectionContent -> LatexSectionContent
    
    LatexTextContent? LatexSubsubsection+ -> LatexSubsectionContent
    LatexSubsubsectionContent -> LatexSubsectionContent
    
    LatexTextContent? LatexParagraph+ -> LatexSubsubsectionContent
    LatexParagraphContent -> LatexSubsubsectionContent
    
    LatexTextContent? -> LatexParagraphContent
    
    LatexTextContent? -> LatexHeader {cons("Header")}

  lexical syntax  
    ~[\\\{\}]+ -> TextContent
    
  lexical restrictions
    TextContent -/- ~[\\\{\}]

  syntax
    "\\latex" "{" <PlainContent-LEX> "}" -> InTextCommand {cons("LatexEscape")}
  
    <NullaryTextCommand-LEX> -> InTextCommand {cons("InTextCommand")}
    <UnaryTextCommand-LEX> <LAYOUT?-CF> "{" LatexTextContent? "}" -> InTextCommand {cons("InTextCommand")}
    <BinaryTextCommand-LEX> <LAYOUT?-CF> "{" LatexTextContent? "}" <LAYOUT?-CF> "{" LatexTextContent? "}" -> InTextCommand {cons("InTextCommand")}
    <TrenaryTextCommand-LEX> <LAYOUT?-CF> "{" LatexTextContent? "}" <LAYOUT?-CF> "{" LatexTextContent? "}" <LAYOUT?-CF> "{" LatexTextContent? "}" -> InTextCommand {cons("InTextCommand")}
    
  
  lexical syntax
    [a-zA-Z]+ -> LatexTextEnvironmentName
  
  syntax
    <LatexTextEnvironmentName-LEX> -> LatexTextEnvironmentName {cons("LatexTextEnvironmentName")}
    "\\begin" "{" LatexTextEnvironmentName "}"
      LatexTextContent
    "\\end" "{" LatexTextEnvironmentName "}" 
    ->
    InTextEnvironment {cons("StandardEnvironment")}
  
  
  desugarings
    latex-to-plain
  
  rules
    mapconcat-strings(s) = map(s); concat-strings
  
    latex-to-plain :
      LatexDec(mods, n, LatexBody(content))
      ->
      PlainDec(PlainDecHead(mods, n, Some("tex")), PlainBody(<pp-latex> content))
    
    pp-latex :
      (a, b) -> <conc-strings> (s1, s2)
      where <pp-latex> a => s1; 
            <pp-latex> b => s2
    
    pp-latex :
      l -> s
      where <?[] + ?[_] + is-list> l;
            <mapconcat-strings(pp-latex)> l => s

    pp-latex :
      None -> ""
    
    pp-latex :
      Some(t) -> <pp-latex> t
    
    pp-latex :
      Text(s) -> s
      
    pp-latex :
      TextBlock(t) -> <conc-strings> ("{", s, "}")
      where
        <pp-latex> t => s
    
    pp-latex :
      TextCommand(c) -> <pp-latex-command> c
    
    pp-latex :
      TextEnvironment(e) -> <pp-latex-environment> e
    
    pp-latex :
      Header(h) -> <pp-latex> h

    pp-latex-structure(|struct) :
      (h, p) -> <conc-strings> ("\\", struct, "{", hs, "}", ps)
      where
        <pp-latex> h => hs;
        <pp-latex> p => ps 
    
    pp-latex :
      Part(h, p) -> <pp-latex-structure(|"part")> (h, p)
    pp-latex :
      Chapter(h, p) -> <pp-latex-structure(|"chapter")> (h, p)
    pp-latex :
      Section(h, p) -> <pp-latex-structure(|"section")> (h, p)
    pp-latex :
      Subsection(h, p) -> <pp-latex-structure(|"subsection")> (h, p)
    pp-latex :
      Subsubsection(h, p) -> <pp-latex-structure(|"subsubsection")> (h, p)
    pp-latex :
      Paragraph(h, p) -> <pp-latex-structure(|"paragraph")> (h, p)
    
    pp-latex-command :
      LatexEscape(code) -> code
    
    pp-latex-command :
      InTextCommand#([com|args]) -> <conc-strings> (com, args-string)
      where
        <mapconcat-strings(\ a -> <conc-strings> ("{", <pp-latex> a, "}") \)> args => args-string
      
    pp-latex-environment :
      StandardEnvironment(LatexTextEnvironmentName(lname), content, LatexTextEnvironmentName(rname)) ->
      <conc-strings> ("\\begin{", lname, "}", 
                        <pp-latex> content,
                      "\\end{", rname, "}")
  
  rules
    latex-environment = fail
    
    constraint-error :
      e@LatexTextEnvironmentName(name) -> (<id>, <conc-strings> ("undefined environment: ", name))
      where <not(latex-environment)> name
    
    constraint-error :
      StandardEnvironment(lname, _, rname) -> [(lname, msg), (rname, msg)]
      where
        <not(equal)> (lname, rname); 
        !"begin and end name must coincide" => msg
}

public editor services Latex {
  colorer
    TextContent : black
    LatexTextEnvironmentName : black
    
    NullaryTextCommand : 127 0 85 bold
    UnaryTextCommand : 127 0 85 bold
    BinaryTextCommand : 127 0 85 bold
    TrearyTextCommand : 127 0 85 bold
    
    environment _.LatexEscape : black
    environment LatexHeader : 0 0 255 bold
  
  outliner
    LatexPart
    LatexChapter
    LatexSection
    LatexSubsection
    LatexSubsubsection
    LatexParagraph
  
  folding
    LatexPart
    LatexChapter
    LatexSection
    LatexSubsection
    LatexSubsubsection
    LatexParagraph
    
    InTextEnvironment

  completions
    completion template : LatexPart = "\part{" <name> "}\n"
    completion template : LatexChapter = "\chapter{" <name> "}\n"
    completion template : LatexSection = "\section{" <name> "}\n"
    completion template : LatexSubsection = "\subsection{" <name> "}\n"
    completion template : LatexSubsubsection = "\subsubsection{" <name> "}\n"
    completion template : LatexParagraph = "\paragraph{" <name> "}\n"
}