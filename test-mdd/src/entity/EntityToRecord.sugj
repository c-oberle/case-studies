package entity;

public transformation EntityToRecord {
  main = oncetd(entity-to-record)
  
  entity-to-record :
       ModelDec(ModelDecHead(mods, Id(name), Id("Entity")), ModelBody(body))
    -> ClassDec(ClassDecHead(mods, Id(name), None, None, None), ClassBody(decls))
  where constr := <make-java-constr(|name)> body
      ; fields := <map(make-java-fields)> body
      ; accessors := <mapconcat(\t -> [<make-java-getter> t, <make-java-setter(|name, body)> t]\)> body
      ; decls := <concat> [[constr], fields, accessors]
  

  make-java-fields :
       Tuple([name, type])
    -> FieldDec([Private], <to-java-type> type, [VarDec(Id(name))])
  

  make-java-getter :
       Tuple([name, type])
    -> MethodDec(MethodDecHead([Public], None, java-type, Id(get-name),[],None), Block([Return(Some(Field(This,Id(name))))]))
  where java-type := <to-java-type> type
      ; get-name := <concat-strings> ["get", <first-upper> name]

  make-java-setter(|class-name, fields) :
       Tuple([name, type])
    -> MethodDec(MethodDecHead([Public], None, this-class-type, Id(set-name),[java-param],None),Block([Return(Some(java-new-expr))]))
  where this-class-type := <to-java-type> class-name
      ; java-type := <to-java-type> type
      ; set-name := <concat-strings> ["set", <first-upper> name]
      ; java-param := <make-java-param> Tuple([name, type])
      ; java-new-expr := <make-java-new-expr(|class-name)> fields
  
  make-java-new-expr(|class-name) :
       fields
    -> NewInstance(None,ClassOrInterfaceType(TypeName(Id(class-name)),None), args, None)
  where args := <map(?Tuple([<id>,_]); make-java-var-ref)> fields 

  
  make-java-var-ref :
       name
    -> ExprName(Id(name))

  make-java-constr(|class-name) :
       fields
    -> ConstrDec(
         ConstrDecHead([Public], None, Id(class-name), java-params, None),
         ConstrBody(None, java-init-stmts))
  where java-params := <map(make-java-param)> fields
      ; java-init-stmts := <map(make-java-init-stmt)> fields
  
  
  make-java-param :
       Tuple([name1, type1])
    -> Param([], <to-java-type> type1, Id(name1))
 
 
  make-java-init-stmt :
       Tuple([name, type])
    -> ExprStm(Assign(Field(This, Id(name)), ExprName(Id(name))))
  
  to-java-type : "int" -> Int()
  to-java-type : "Integer" -> Int()
  to-java-type : type -> ClassOrInterfaceType(TypeName(Id(type)),None)
  
  
  first-upper = string-as-chars([to-upper|id])
}

