package quest.analysis;

import quest.lang.Syntax;

public sugar Naming {
  rules
    analyze =
    {| LocalQuestContext, ActivatedQuestContext:
      rules( LocalQuestContext := <new-hashtable>
             ActivatedQuestContext := <new-hashtable> ); 
      Questionnaire(id, id, analyze-names)
    |}
    
  rules
    analyze-names = QNil
    analyze-names = QCons(analyze-names, analyze-names)
    
    analyze-names = 
      ?Question(_, QuestId(name), _); 
      register-activated-quest(|name)
    analyze-names = QuestGroup(id, analyze-names)
    analyze-names = ConditionalQuest(analyze-expr-names, analyze-names)
    analyze-names = ConditionalQuest(analyze-expr-names, analyze-names, analyze-names)
    analyze-names = 
      ?LocalQuest(Question(_, QuestId(name), _)); 
      register-local-quest(|name)
    analyze-names =
      ?QuestRef(QuestId(name)); 
      if lookup-local-quest(|name) => ref
        then put-reference(|ref)
        else put-name-error(|"Could not resolve reference.")
      end
      
  rules
    analyze-expr-names = 
      topdown(?ExprName(Id(name))); 
      if lookup-activated-quest(|name) => ref
        then put-reference(|ref)
        else put-name-error(|"Could not resolve reference.")
      end
    
  rules
    register-local-quest(|name) = where(?val; LocalQuestContext; hashtable-put(|name, val))
    lookup-local-quest(|name) = LocalQuestContext; hashtable-get(|name)
    
    register-activated-quest(|name) = where(?val; ActivatedQuestContext; hashtable-put(|name, val))
    lookup-activated-quest(|name) = ActivatedQuestContext; hashtable-get(|name)
  
  rules
    is-reference = where(get-anno(|"reference"))
    is-reference-to(|t) = where(retrieve-reference; equal(|t)) 
    retrieve-reference = get-anno(|"reference")
    put-reference(|t) = put-anno(|"reference", t)
    
    has-name-error = get-anno(|"name-error")
    retrieve-name-error = get-anno(|"name-error")
    put-name-error(|type) = put-anno(|"name-error", type)
}