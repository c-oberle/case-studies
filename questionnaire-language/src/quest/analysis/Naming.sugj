package quest.analysis;

import quest.lang.Syntax;

public sugar Naming {
  rules
    analyze =
    {| LocalQuest, ActivatedQuest:
       Questionnaire(id, id, analyze-names)
    |}
    
  rules
    analyze-names = QNil
    analyze-names = QCons(analyze-names, analyze-names)
    
    analyze-names = 
      ?q@Question(_, QuestId(name), _); 
      rules ( ActivatedQuest : name -> q )
    analyze-names = QuestGroup(id, analyze-names)
    analyze-names = ConditionalQuest(analyze-expr-names, analyze-names-local-scope)
    analyze-names = ConditionalQuest(analyze-expr-names, analyze-names-local-scope, analyze-names-local-scope)
    analyze-names = 
      ?q@LocalQuest(Question(_, QuestId(name), _));
      rules ( LocalQuest : name -> q) 
    analyze-names =
      ?QuestRef(QuestId(name)); 
      if <LocalQuest> name => ref
        then put-reference(|ref)
        else put-name-error(|"Could not resolve reference.")
      end

    analyze-names-local-scope = {| LocalQuest: analyze-names |}
      
  rules
    analyze-expr-names = topdown(try(analyze-expr-name))
    analyze-expr-name =
      ?ExprName(Id(name)); 
      if <ActivatedQuest> name => ref
        then put-reference(|ref)
        else put-name-error(|"Could not resolve reference.")
      end

  rules
    is-reference = where(get-anno(|"reference"))
    is-reference-to(|t) = where(retrieve-reference; equal(|t)) 
    retrieve-reference = get-anno(|"reference")
    put-reference(|t) = put-anno(|"reference", t)
    
    has-name-error = get-anno(|"name-error")
    retrieve-name-error = get-anno(|"name-error")
    put-name-error(|t) = put-anno(|"name-error", t)
    
  rules
    constraint-error =
      where(retrieve-name-error => err);
      !(<id>,<conc-strings>("naming error: ", err))
      
    resolve-reference = ?(<retrieve-reference>,_,_,_,_)
}

public editor services Naming {
  references
    reference _ : resolve-reference
}