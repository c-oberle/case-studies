package quest.analysis;

/*
 * TODO: use proper SAT solver or the like
 * Hints from Christian Kaestner:
 *   pseudo-boolsche SAT solver -> SAT4J, Packet: pseudo
 *   CSP solver -> Choco
 *   SMT -> Microsoft Z3
 */
public sugar Satisfiability {
  rules
    is-satisfiable =
      innermost(reduce);
      repeat(remove-equation);
      innermost(reduce);debug;
      repeat(remove-variable);
      innermost(reduce);
      ?Lit(Bool(True))

    remove-equation =
      ?t; oncetd({c: where(?c#([_,_]); <elem> (c, ["Lt", "Gt", "LtEq", "GtEq", "Eq", "NotEq"])); ?op});
      <bottomup({t*: try(?op{t*}; !Lit(Bool(True)))})> t => with-true;
      <bottomup({t*: try(?op{t*}; !Lit(Bool(False)))})> t => with-false;
      !LazyOr(with-true, with-false)
    
    remove-variable =
      ?t; oncetd(ExprName(Id(?name)));
      <subst-all-vars(|name, Lit(Bool(True)))> t => with-true;
      <subst-all-vars(|name, Lit(Bool(False)))> t => with-false;
      !LazyOr(with-true, with-false)
    
    reduce : LazyAnd(Lit(Bool(False)), _) -> Lit(Bool(False))
    reduce : LazyAnd(Lit(Bool(True)), t2) -> t2
    reduce : LazyOr(Lit(Bool(True)), _) -> Lit(Bool(True))
    reduce : LazyOr(Lit(Bool(False)), t2) -> t2
    reduce : Not(Lit(Bool(True))) -> Lit(Bool(False))
    reduce : Not(Lit(Bool(False))) -> Lit(Bool(True))
    
    subst-all-vars(|name, val) = bottomup(try(subst-var(|name, val)))
    subst-var(|name, val) = ?ExprName(Id(name)); !val
}