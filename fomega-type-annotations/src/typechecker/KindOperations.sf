module typechecker.KindOperations

import org.sugarj.languages.Fomega


rules

  kind-mismatch :
    (J, K) -> [<concat-strings> [ "kind mismatch, expected "
                                , <write-to-string> J
                                , " but found "
                                , <write-to-string> K]]


rules

  kind-eq = kind-eq-proper <+ kind-eq-unknown <+ kind-eq-unexpected

  kind-eq-proper :
    (KiStar(), KiStar()) -> []

  kind-eq-proper :
    (KiArrow(J1,J2), KiArrow(K1,K2)) -> <conc> (msgs1, msgs2)
    where <kind-eq> (J1, K1) => msgs1
        ; <kind-eq> (J2, K2) => msgs2

  kind-eq-unknown :
    (KiUnknown(), K) -> []

  kind-eq-unknown :
    (K, KiUnknown()) -> []

  kind-eq-unexpected = kind-mismatch


rules

  kind-eq-arrow = kind-eq-arrow-proper <+ kind-eq-arrow-unexpected

  kind-eq-arrow-proper :
    KiUnknown() -> (KiUnknown(), KiUnknown(), [])

  kind-eq-arrow-proper :
    KiArrow(K1, K2) -> (K1, K2, [])

  kind-eq-arrow-unexpected :
    K -> ( KiUnknown(), KiUnknown()
         , [<concat-strings> [ "kind mismatch, expected arrow kind but found "
                             , <write-to-string> K
                             ]]
         )


rules

  kind-eq-star = kind-eq-star-proper <+ kind-eq-star-unexpected

  kind-eq-star-proper :
    KiUnknown() -> []

  kind-eq-star-proper :
    KiStar() -> []

  kind-eq-star-unexpected :
    K -> [<concat-strings> ["kind mismatch, expected * but found " , <write-to-string> K]]
