module contextanalysis.rules.Syntax

import org.sugarj.languages.Stratego
import org.sugarj.languages.Fomega

import concretesyntax.Stratego


lexical syntax
  "===" "="* -> RuleSep

lexical restrictions
  RuleSep -/- [\=]

context-free syntax
  RuleSep StrategoVar? -> RuleSepName {cons("RuleName"), layout(1.first.line == 2.last.line)}


context-free syntax // *** Syntax for typing rules ***

  TypingRule -> SugarDefElem
  TypingRule -> InferenceRule

  TypingRulePremises RuleSepName TypingRuleConsequence
    -> TypingRule {cons("TypingRule"),
                   layout(1.first.col == 2.first.col &&
                          2.first.col == 3.first.col)}

  TypingRulePremiseList -> TypingRulePremises {cons("PremiseList")}
                        -> TypingRulePremises {cons("NoPremises")}

  OffTypingJudgment -> TypingRuleConsequence

  TypingJudgment -> OffTypingJudgment {layout(1.first.col < 1.left.col)}

  OffTypingRuleJudgment -> TypingRulePremiseList
  OffTypingRuleJudgment TypingRulePremiseList -> TypingRulePremiseList {cons("PremiseCons"),
                                                                        layout(1.first.col == 2.first.col)}

  TypingRuleJudgment -> OffTypingRuleJudgment {layout(1.first.col < 1.left.col)}


context-free syntax // *** Syntax for kinding rules ***

  KindingRule -> SugarDefElem
  KindingRule -> InferenceRule

  KindingRulePremises RuleSepName KindingRuleConsequence
    -> KindingRule {cons("KindingRule"),
                    layout(1.first.col == 2.first.col &&
                           2.first.col == 3.first.col)}

  KindingRulePremiseList -> KindingRulePremises {cons("PremiseList")}
                         -> KindingRulePremises {cons("NoPremises")}

  OffKindingJudgment -> KindingRuleConsequence

  KindingJudgment -> OffKindingJudgment {layout(1.first.col < 1.left.col)}

  OffKindingRuleJudgment -> KindingRulePremiseList
  OffKindingRuleJudgment KindingRulePremiseList -> KindingRulePremiseList {cons("PremiseCons"),
                                                                           layout(1.first.col == 2.first.col)}

  KindingRuleJudgment -> OffKindingRuleJudgment {layout(1.first.col < 1.left.col)}


context-free syntax // *** Syntax for signature rules ***

  SignatureRule -> SugarDefElem
  SignatureRule -> InferenceRule

  SignatureRulePremises RuleSepName SignatureRuleConsequence
    -> SignatureRule {cons("SignatureRule"),
                      layout(1.first.col == 2.first.col &&
                             2.first.col == 3.first.col)}

  SignatureRulePremiseList -> SignatureRulePremises {cons("PremiseList")}
                           -> SignatureRulePremises {cons("NoPremises")}

  OffSignatureJudgment -> SignatureRuleConsequence

  SignatureJudgment -> OffSignatureJudgment {layout(1.first.col < 1.left.col)}

  OffSignatureRuleJudgment -> SignatureRulePremiseList
  OffSignatureRuleJudgment SignatureRulePremiseList -> SignatureRulePremiseList {cons("PremiseCons"),
                                                                                 layout(1.first.col == 2.first.col)}

  SignatureRuleJudgment -> OffSignatureRuleJudgment {layout(1.first.col < 1.left.col)}


context-free syntax // *** Syntax for type normalization rules ***

  NormalizationRule -> SugarDefElem
  NormalizationRule -> InferenceRule

  NormalizationRulePremises RuleSepName NormalizationRuleConsequence
    -> NormalizationRule {cons("NormalizationRule"),
                      layout(1.first.col == 2.first.col &&
                             2.first.col == 3.first.col)}

  NormalizationRulePremiseList -> NormalizationRulePremises {cons("PremiseList")}
                               -> NormalizationRulePremises {cons("NoPremises")}

  OffNormalizationJudgment -> NormalizationRuleConsequence

  NormalizationJudgment -> OffNormalizationJudgment {layout(1.first.col < 1.left.col)}

  OffNormalizationRuleJudgment -> NormalizationRulePremises
  OffNormalizationRuleJudgment NormalizationRulePremises -> NormalizationRulePremises {cons("PremiseCons"),
                                                                                 layout(1.first.col == 2.first.col)}

  NormalizationRuleJudgment -> OffNormalizationRuleJudgment {layout(1.first.col < 1.left.col)}


context-free syntax // *** Syntax for kind nomalization rules ***

  KindNormalizationRule -> SugarDefElem
  KindNormalizationRule -> InferenceRule

  KindNormalizationRulePremises RuleSepName KindNormalizationRuleConsequence
    -> KindNormalizationRule {cons("KindNormalizationRule"),
                      layout(1.first.col == 2.first.col &&
                             2.first.col == 3.first.col)}

  KindNormalizationRulePremiseList -> KindNormalizationRulePremises {cons("PremiseList")}
                           -> KindNormalizationRulePremises {cons("NoPremises")}

  OffKindNormalizationJudgment -> KindNormalizationRuleConsequence

  KindNormalizationJudgment -> OffKindNormalizationJudgment {layout(1.first.col < 1.left.col)}

  OffKindNormalizationRuleJudgment -> KindNormalizationRulePremiseList
  OffKindNormalizationRuleJudgment KindNormalizationRulePremiseList -> KindNormalizationRulePremiseList {cons("PremiseCons"),
                                                                                 layout(1.first.col == 2.first.col)}

  KindNormalizationRuleJudgment -> OffKindNormalizationRuleJudgment {layout(1.first.col < 1.left.col)}


context-free syntax // *** Syntax for not-in-lab rules ***

  NotInLabRule -> SugarDefElem
  NotInLabRule -> InferenceRule

  NotInLabRulePremises RuleSepName NotInLabRuleConsequence
    -> NotInLabRule {cons("NotInLabRule"),
                      layout(1.first.col == 2.first.col &&
                             2.first.col == 3.first.col)}

  NotInLabRulePremiseList -> NotInLabRulePremises {cons("PremiseList")}
                           -> NotInLabRulePremises {cons("NoPremises")}

  OffNotinLabJudgment -> NotInLabRuleConsequence

  NotinLabJudgment -> OffNotinLabJudgment {layout(1.first.col < 1.left.col)}

  OffNotInLabRuleJudgment -> NotInLabRulePremiseList
  OffNotInLabRuleJudgment NotInLabRulePremiseList -> NotInLabRulePremiseList {cons("PremiseCons"),
                                                                                 layout(1.first.col == 2.first.col)}

  NotInLabRuleJudgment -> OffNotInLabRuleJudgment {layout(1.first.col < 1.left.col)}



context-free syntax // *** Syntax for contexts ***

  "()"                                                        -> Context {cons("CtxEmpty")}
  "(" Context ";" FomegaID ":" FomegaType ")"                 -> Context {cons("CtxBindVar")}
  "(" Context ";" FomegaID "::" FomegaKind ")"                -> Context {cons("CtxBindTVar")}
  "(" Context ";" FomegaID "::" FomegaKind "=" FomegaType ")" -> Context {cons("CtxBindTVarDef")}


context-free syntax // *** Syntax for signatures ***

  "()"                                                          -> Signature {cons("SigEmpty")}
  "(" FomegaID "::" FomegaKind "=" FomegaType ";" Signature ")" -> Signature {cons("SigBindTVarDef")}
  "(" FomegaID ":" FomegaType ";" Signature ")"                 -> Signature {cons("SigBindVar")}


context-free syntax // *** Syntax for judgments ***

  Context "|-" FomegaType "::" FomegaKind -> KindingJudgment       {cons("KindingJudgment")} 
  Context "|-" FomegaExpr ":" FomegaType  -> TypingJudgment        {cons("TypingJudgment")}
  Context "|-" FomegaType "~>" FomegaType -> NormalizationJudgment {cons("NormalizationJudgment")}
  Context "|-" FomegaDefs "==>" Signature -> SignatureJudgment     {cons("SignatureJudgment")}
               FomegaKind "=::=>" FomegaKind -> KindNormalizationJudgment {cons("KindNormalizationJudgment")}

  FomegaID "notin" "lab" "(" FomegaTyDecls ")"       -> NotinLabJudgment       {cons("NotinLabJudgment")}
  FomegaID ":" FomegaType "in" "decls" FomegaTyDecls -> InDeclJudgment         {cons("InDeclJudgment")}
  FomegaID ":" FomegaType "in" Context               -> VarInContextJudgment   {cons("VarInContextJudgment")}
  FomegaQID ":" FomegaType "in" Context              -> QVarInContextJudgment  {cons("QVarInContextJudgment")}
  FomegaID "::" FomegaKind "in" Context              -> TVarInContextJudgment  {cons("TVarInContextJudgment")}
  FomegaQID "::" FomegaKind "in" Context             -> QTVarInContextJudgment {cons("QTVarInContextJudgment")}
  FomegaID "notin" "dom" "(" Context ")"             -> NotinDomJudgment       {cons("NotinDomJudgment")}

  // Judgments allowed as premises in typing rules
  KindingJudgment       -> TypingRuleJudgment
  TypingJudgment        -> TypingRuleJudgment
  NormalizationJudgment -> TypingRuleJudgment
  NotinLabJudgment      -> TypingRuleJudgment
  InDeclJudgment        -> TypingRuleJudgment
  VarInContextJudgment  -> TypingRuleJudgment
  QVarInContextJudgment -> TypingRuleJudgment

  // Judgments allowed as premises in kinding rules
  KindingJudgment        -> KindingRuleJudgment
  TVarInContextJudgment  -> KindingRuleJudgment
  QTVarInContextJudgment -> KindingRuleJudgment
  NotinLabJudgment       -> KindingRuleJudgment

  // Judgments allowed as premises of signature rules
  KindingJudgment       -> SignatureRuleJudgment
  TypingJudgment        -> SignatureRuleJudgment
  SignatureJudgment     -> SignatureRuleJudgment
  NotinDomJudgment      -> SignatureRuleJudgment
  NormalizationJudgment -> SignatureRuleJudgment

  // Judgments allowed as premises of type normalization rules
  NormalizationJudgment -> NormalizationRuleJudgment

  // Judgments allowed as premises of kind normalization rules
  KindNormalizationJudgment -> KindNormalizationRuleJudgment

  // Judgments allowed as premises of not-in-lab rules
  NotinLabJudgment -> NotInLabRuleJudgment

context-free syntax // *** Substitution on level of types

  "[" FomegaID "|->" FomegaType "]" FomegaType -> FomegaType {cons("Subst")}

signature
  constructors
    Subst: FomegaID * FomegaType * FomegaType -> FomegaType
