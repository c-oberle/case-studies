module contextanalysis.rules.Syntax

import org.sugarj.languages.Stratego
import org.sugarj.languages.Fomega

import concretesyntax.Stratego


lexical syntax
  "===" "="* -> RuleSep

lexical restrictions
  RuleSep -/- [\=]

context-free syntax
  RuleSep StrategoVar? -> RuleSepName {cons("RuleName"), layout(1.first.line == 2.last.line)}


context-free syntax // *** Syntax for typing rules ***

  TypingRule -> SugarDefElem

  TypingRulePremises RuleSepName TypingRuleConsequence
    -> TypingRule {cons("TypingRule"),
                   layout(1.first.col == 2.first.col &&
                          2.first.col == 3.first.col)}

  TypingRulePremiseList -> TypingRulePremises {cons("PremiseList")}
                        -> TypingRulePremises {cons("NoPremises")}

  OffTypingJudgment -> TypingRuleConsequence

  TypingJudgment -> OffTypingJudgment {layout(1.first.col < 1.left.col)}

  OffTypingRuleJudgment -> TypingRulePremiseList
  OffTypingRuleJudgment TypingRulePremiseList -> TypingRulePremiseList {cons("PremiseCons"),
                                                                        layout(1.first.col == 2.first.col)}

  TypingRuleJudgment -> OffTypingRuleJudgment {layout(1.first.col < 1.left.col)}


context-free syntax // *** Syntax for kinding rules ***

  KindingRule -> SugarDefElem

  KindingRulePremises RuleSepName KindingRuleConsequence
    -> KindingRule {cons("KindingRule"),
                    layout(1.first.col == 2.first.col &&
                           2.first.col == 3.first.col)}

  KindingRulePremiseList -> KindingRulePremises {cons("PremiseList")}
                         -> KindingRulePremises {cons("NoPremises")}

  OffKindingJudgment -> KindingRuleConsequence

  KindingJudgment -> OffKindingJudgment {layout(1.first.col < 1.left.col)}

  OffKindingRuleJudgment -> KindingRulePremiseList
  OffKindingRuleJudgment KindingRulePremiseList -> KindingRulePremiseList {cons("PremiseCons"),
                                                                           layout(1.first.col == 2.first.col)}

  KindingRuleJudgment -> OffKindingRuleJudgment {layout(1.first.col < 1.left.col)}


context-free syntax // *** Syntax for contexts ***

  "()"                                                        -> Context {cons("CtxEmpty")}
  "(" Context ";" FomegaID ":" FomegaType ")"                 -> Context {cons("CtxBindVar")}
  "(" Context ";" FomegaID "::" FomegaKind ")"                -> Context {cons("CtxBindTVar")}
  "(" Context ";" FomegaID "::" FomegaKind "=" FomegaType ")" -> Context {cons("CtxBindTVarDef")}


context-free syntax // *** Syntax for judgments ***

  Context "|-" FomegaType "::" FomegaKind -> KindingJudgment       {cons("KindingJudgment")} 
  Context "|-" FomegaExpr ":" FomegaType  -> TypingJudgment        {cons("TypingJudgment")}
  Context "|-" FomegaType "~>" FomegaType -> NormalizationJudgment {cons("NormalizationJudgment")}

  FomegaID "notin" "sel" "(" FomegaFields ")"        -> NotinSelJudgment       {cons("NotinSelJudgment")}
  FomegaID ":" FomegaType "in" "decls" FomegaTyDecls -> InDeclJudgment         {cons("InDeclJudgment")}
  FomegaID ":" FomegaType "in" Context               -> VarInContextJudgment   {cons("VarInContextJudgment")}
  FomegaQID ":" FomegaType "in" Context              -> QVarInContextJudgment  {cons("QVarInContextJudgment")}
  FomegaID "::" FomegaKind "in" Context              -> TVarInContextJudgment  {cons("TVarInContextJudgment")}
  FomegaQID "::" FomegaKind "in" Context             -> QTVarInContextJudgment {cons("QTVarInContextJudgment")}

  // Judgments allowed as premises in typing rules
  KindingJudgment       -> TypingRuleJudgment
  TypingJudgment        -> TypingRuleJudgment
  NormalizationJudgment -> TypingRuleJudgment
  NotinSelJudgment      -> TypingRuleJudgment
  InDeclJudgment        -> TypingRuleJudgment
  VarInContextJudgment  -> TypingRuleJudgment
  QVarInContextJudgment -> TypingRuleJudgment

  // Judgments allowed as premises in kinding rules
  KindingJudgment       -> KindingRuleJudgment
  VarInContextJudgment  -> KindingRuleJudgment
  QVarInContextJudgment -> KindingRuleJudgment


context-free syntax // *** Substitution on level of types

  "[" FomegaID "|->" FomegaType "]" FomegaType -> FomegaType {cons("Subst")}

signature
  constructors
    Subst: FomegaID * FomegaType * FomegaType -> FomegaType
