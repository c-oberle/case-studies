module extensions.BooleanOps

import org.sugarj.languages.Fomega
import concretesyntax.Fomega
import concretesyntax.Metavars

import extension.Declaration

import contextanalysis.rules.Syntax
import contextanalysis.rules.Desugaring
import contextanalysis.rules.Verification
import contextanalysis.TypingRelation
import contextanalysis.SignatureRelation


syntax {
  context-free syntax
    FomegaExpr "||" FomegaExpr -> FomegaExpr {cons("Or"), right}
}

desugaring desugar-bool {
  desugar-bool :
    |[ ~e1 || ~e2 ]| -> |[ (\tmp:Bool. if tmp then tmp else ~e2) ~e1 ]|
}

typing {
  // unsound type rule: cannot use ~e2 in context where 'tmp' is bound
  // ~C |- ~e1 : Bool
  // ~C |- ~e2 : Bool
  // ======================= T-Bool-Or
  // ~C |- ~e1 || ~e2 : Bool

  // capture of 'tmp' in e2 and rejection of e2 if no 'tmp' in context
  ~C |- ~e1 : Bool
  (~C; tmp: Bool) |- ~e2 : Bool
  ======================= T-Bool-Or
  ~C |- ~e1 || ~e2 : Bool
  
  // ~C |- ~e1 : Bool
  // tmp notin dom(~C)
  // ~C |- ~e2 : Bool
  // ======================= T-Bool-Or
  // ~C |- ~e1 || ~e2 : Bool

}
