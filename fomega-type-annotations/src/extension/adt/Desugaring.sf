module extension.adt.Desugaring

import org.sugarj.languages.Fomega

import concretesyntax.Fomega
import concretesyntax.Metavars

import contextanalysis.rules.Syntax
import contextanalysis.rules.Desugaring
// import contextanalysis.rules.Verification

import extension.adt.Syntax


desugarings
  desugar-data


signature
  constructors
    ADT-TYPE:    FomegaID * DataParams * DataCons -> StrategoTerm
    ADT-ABS:     DataParams * FomegaType -> StrategoTerm
    ADT-OP:      FomegaID * DataParams * DataCons -> StrategoTerm 
    ADT-ARG:     DataParams -> StrategoTerm
    ADT-PK:      DataParams -> StrategoTerm
    ADT-DECLS:   DataCons -> StrategoTerm
    ADT-CK:      DataParams -> StrategoTerm
    ADT-CA:      DataParams * FomegaType * FomegaType -> StrategoTerm
    ADT-UNCURRY: FomegaID * DataParams * FomegaType -> StrategoTerm


rules

  desugar-data :
    |[ data ~%X ~params = ~dcons ~=defs ]| -> |[ type ~%X = M~ADT-TYPE(X, params, dcons) ~=defs ]|

  desugar-data :
    |[ data ~%X ~params = ~dcons ]| -> |[ type ~%X = M~ADT-TYPE(X, params, dcons) ]|


  // ADT-TYPE

  desugar-data :
    ADT-TYPE(X, params, dcons) ->
      fomega-type |[ M~ADT-ABS(params, |[ mu (M~ADT-OP(X, params, dcons), M~(ADT-ARG(params))) ]|) ]|


  // ADT-ABS

  desugar-data :
    ADT-ABS(fomega-params |[ ]|, T) -> fomega-type |[ ~T ]|

  desugar-data :
    ADT-ABS(|[ (~%X::~K) ~params ]|, T) -> fomega-type |[ \~%X::~K. M~ADT-ABS(params, T) ]|


  // ADT-OP

  desugar-data :
    ADT-OP(X, params, dcons) ->
      fomega-type |[ \~%X :: M~(ADT-PK(params)) => *.
                       \args :: M~(ADT-PK(params)).
                         M~ADT-UNCURRY(X, params, |[ <M~(ADT-DECLS(dcons))> ]|)
                  ]| 


  // ADT-UNCURRY

  desugar-data :
    ADT-UNCURRY(X, params, T) ->
      fomega-type |[ (\~%X :: M~(ADT-CK(params)).
                       M~ADT-CA(params, fomega-type |[ args ]|, ADT-ABS(params, T)))
                     M~ADT-ABS(params, fomega-type |[ ~%X M~(ADT-ARG(params)) ]|)
                  ]|


  // ADT-CK

  desugar-data :
    ADT-CK(fomega-params |[ ]|) -> |[ * ]|

  desugar-data :
    ADT-CK(fomega-params |[ (~%X::~K) ~params ]|) -> |[ ~K => M~(ADT-CK(params)) ]|


  // ADT-CA

  desugar-data :
    ADT-CA(fomega-params |[ ]|, args, T) -> T

  desugar-data :
    ADT-CA(fomega-params |[ (~%X::~K) ~params ]|, args, T) ->
      ADT-CA(params, fomega-type |[ ~args.2 ]|, fomega-type |[ ~T (~args.1) ]|)


  // ADT-DECLS

  desugar-data :
    ADT-DECLS(fomega-datacons |[ ~%Xcon ~%Xdiscr { ~decls } ]|) -> 
      fomega-tydecls |[ ~%Xcon : { ~decls } ]|

  desugar-data :
    ADT-DECLS(fomega-datacons |[ ~%Xcon ~%Xdiscr { ~decls } | ~dcons ]|) ->
      fomega-tydecls |[ ~%Xcon : { ~decls } Mtydecls1~(ADT-DECLS(dcons)) ]|


  // ADT-ARG

  desugar-data :
    ADT-ARG(fomega-params |[ ]|) -> fomega-type |[ [] ]|

  desugar-data :
    ADT-ARG(|[ (~%X::~K) ~params ]|) -> fomega-type |[ {~%X, M~(ADT-ARG(params))} ]|


  // ADT-PK

  desugar-data :
    fomega-type |[ M~ADT-PK(fomega-params |[ ]|) ]| -> fomega-type |[ [] ]|

  desugar-data :
    fomega-type |[ M~ADT-PK(|[ (~%X::~K) ~params ]|) ]| -> fomega-type |[ {~K, M~(ADT-PK(params))} ]|


~%X notin dom(~C)
~C |- M~ADT-TYPE(X, params, dcons) :: ~K
(~C;~%X::~K=M~EVAL(ADT-TYPE(X, params, dcons))) |- ~=defs ==> ~sig
================================================================== S-DataCons
~C |- data ~%X ~params = ~dcons ~=defs ==> ~sig
