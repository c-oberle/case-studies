module concretesyntax.Metavars

import org.sugarj.languages.Fomega
import concretesyntax.MetaExplode

context-free syntax

  "~"  StrategoVar  -> Context        {cons("Metavar")}
  "~:" StrategoVar  -> FomegaTyDecls1 {cons("Metavar")}
  "~"  StrategoVar  -> FomegaTyDecls  {cons("Metavar")}
  "~"  StrategoVar  -> FomegaBranches {cons("Metavar")}
  "~=" StrategoVar  -> FomegaFields1  {cons("Metavar")}
  "~"  StrategoVar  -> FomegaFields   {cons("Metavar")}
  "~"  StrategoVar  -> FomegaExpr     {cons("Metavar")}
  "~"  StrategoVar  -> FomegaType     {cons("Metavar")}
  "~"  StrategoVar  -> FomegaKind     {cons("Metavar")}

  "~=" StrategoVar -> FomegaDefs {cons("Metavar")}
  "~" StrategoVar  -> Signature  {cons("Metavar")}

  "~%" StrategoVar -> FomegaID       {cons("Metavar")}
  "~&" StrategoVar -> FomegaQID      {cons("Metavar")}

  "~#" StrategoVar -> FomegaNAT      {cons("Metavar")}
  "~$" StrategoVar -> FomegaSTRING   {cons("Metavar")}

context-free syntax
  "M~" StrategoTerm -> FomegaExpr     {cons("MetaExpr")}
  "M~" StrategoTerm -> FomegaType     {cons("MetaExpr")}
  "M~" StrategoTerm -> FomegaTyDecls  {cons("MetaExpr")}
  "M~" StrategoTerm -> FomegaTyDecls1 {cons("MetaExpr")}
  "M~" StrategoTerm -> FomegaKind     {cons("MetaExpr")}

  "Mexpr~" StrategoTerm     -> FomegaExpr     {cons("MetaExpr")}
  "Mtype~" StrategoTerm     -> FomegaType     {cons("MetaExpr")}
  "Mtydecls~" StrategoTerm  -> FomegaTyDecls  {cons("MetaExpr")}
  "Mtydecls1~" StrategoTerm -> FomegaTyDecls1 {cons("MetaExpr")}
  "Mkind~" StrategoTerm     -> FomegaKind     {cons("MetaExpr")}

rules

  TrmFromTerm = ?Metavar(<MetaExplode>)
  TrmFromTerm = ?MetaExpr(<MetaExplode>)
