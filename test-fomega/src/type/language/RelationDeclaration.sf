MODULE type.language.RelationDeclaration

IMPORT org.sugarj.languages.Sdf2;

context-free syntax
  TypeRelationDecl -> SugarDefElem
  "type" "relation" StrategoId TypeRelationSignature -> TypeRelationDecl {cons("TypeRelationDecl")}

  TypeRelationCtx TypeRelationSymbol TypeRelationTerm TypeRelationOfTypeSymbol TypeRelationType
    -> TypeRelationSignature {cons("TypeRelationSig")}
  
  Sdf2Sort -> TypeRelationCtx
  OperatorSymbol -> TypeRelationSymbol
  Sdf2Sort -> TypeRelationTerm
  OperatorSymbol -> TypeRelationOfTypeSymbol
  Sdf2Sort -> TypeRelationType

lexical syntax
  ~[\ \n\t\r]+ -> OperatorSymbol
lexical restrictions
  OperatorSymbol -/- ~[\ \n\t\r]


desugarings
  desugar-type-relation-declaration

rules
  desugar-type-relation-declaration =
    SugarBody(
      where(filter(?TypeRelationDecl(_,_)); not(?[])); 
      mapconcat(type-relation-declaration-to-sugar <+ ![<id>]))

  type-relation-declaration-to-sugar :
    TypeRelationDecl(name, rel) ->
    [grammar-elem(context-free-syntax([prod | metavar-prods])),
     transformation-elem(Rules([rule]))]
  where
    <type-rel-to-prod(|name)> rel => prod;
    <type-rel-to-rule(|name)> rel => rule;
    <type-rel-metavar-prods> rel => metavar-prods

  type-rel-to-prod(|name) : 
    TypeRelationSig(ctxSort, relSymbol, termSort, typeOfSymbol, typeSort) ->
    prod([sort(ctxSort), lit(relSymbol), sort(termSort), lit(typeOfSymbol), sort(typeSort)],
         sort("TypeRelation"),
         attrs([cons-attr]))
  where
    <conc-strings> (name, "TypeRelation") => cons-name;
    !term(default(appl(unquoted("cons"), [fun(quoted(cons-name))]))) => cons-attr

  type-rel-to-rule(|name) :
    TypeRelationSig(ctxSort, relSymbol, termSort, typeOfSymbol, typeSort) ->
    RDefNoArgs("type-relation-name",
               RuleNoCond(NoAnnoList(Str(relSymbol)), 
                          NoAnnoList(Str(name))))

  type-rel-metavar-prods : 
    TypeRelationSig(ctxSort, _, termSort, _, typeSort) ->
    [<type-rel-metavar-prod> ctxSort,
     <type-rel-metavar-prod> termSort,
     <type-rel-metavar-prod> typeSort]

  type-rel-metavar-prod :
    name ->
    prod([lit("~"), sort("StrategoVar")], sort(name), attrs([cons-attr]))
  where
    <conc-strings> (name, "Var") => cons-name;
    !term(default(appl(unquoted("cons"), [fun(quoted(cons-name))]))) => cons-attr

