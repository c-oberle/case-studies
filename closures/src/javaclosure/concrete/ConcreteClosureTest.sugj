package javaclosure.concrete;

import java.util.List;
import java.util.ArrayList;

import javaclosure.concrete.Sugar;
import javaclosure.Transformation;

import org.junit.Assert;
import org.junit.Test;

public class ConcreteClosureTest {

	public static class TestList<T>{
	
		public List<T> list;

		public TestList() {
			list = new ArrayList<T>();
		}
	
		public String toString() {
			String s = "";
  	
			for (int i = 0; i < list.size(); i++) {
				s += list.get(i);
  		
				if (i < list.size() - 1)
					s += ", ";
			}
  	
			return s;
		}
		
		public boolean equals(Object o) {
			if (!(o instanceof TestList)) {
				return false;
			}
			TestList other = (TestList) o;
			if (list.size() != other.list.size()) {
				return false;
			}
			for(int i = 0; i < list.size(); i++) {
				if (!list.get(i).equals(other.list.get(i))) {
					return false;
				}
			}
			return true;
		}
  
		public <U> TestList<U> map(#U(T) f) {
			TestList<U> test = new TestList<U>();
		
			for (T t : list)
				test.list.add(f.invoke(t));
      
			return test;
		}
	}
  
  
	public static TestList<Integer> createIntegerList() {
		TestList<Integer> t = new TestList<Integer>();
		t.list.add(1);
		t.list.add(2);
		t.list.add(3);
		t.list.add(4);
		t.list.add(5);
		return t;
	}
	
	public static <A,B,C> #C(A) compose(final #B(A) f, final #C(B) g) {
		return #C(A a) { return g.invoke(f.invoke(a)); };
	}
  
	@Test
	public void testList() {
		TestList<Integer> t = createIntegerList();
		Assert.assertEquals("1, 2, 3, 4, 5", t.toString());
	}
	
	@Test
	public void testMap() {
		TestList<Integer> t = createIntegerList();
		#Integer(Integer) inc = #Integer(Integer i) { return i + 1; };
		TestList<Integer> tInc = t.map(inc);
		Assert.assertEquals("2, 3, 4, 5, 6", tInc.toString());
	}
	
	@Test
	public void testCompose() {
		TestList<Integer> t = createIntegerList();
		#Integer(Integer) inc = #Integer(Integer i) { return i + 1; };
		#Double(Integer) toDouble = #Double(Integer i) { return i.doubleValue(); };
		TestList<Double> tIncDouble1 = t.map(inc).map(toDouble);
		TestList<Double> tIncDouble2 = t.map(compose(inc, toDouble));
		Assert.assertEquals("2.0, 3.0, 4.0, 5.0, 6.0", tIncDouble1.toString());
		Assert.assertEquals(tIncDouble1, tIncDouble2);
	}
		
}